[pytest]
# Minimum pytest version required
minversion = 8.0

# Default command line options
addopts = 
    -ra
    --strict-markers
    --import-mode=importlib
    --tb=short
    --cov=src
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=80

# Test discovery paths
testpaths = tests

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Required plugins
required_plugins = 
    pytest-asyncio>=0.21.0
    pytest-timeout>=2.1.0
    pytest-mock>=3.10.0
    pytest-cov>=4.0.0

# Test markers
markers =
    # Priority markers
    critical: Critical priority tests that must pass (run with: pytest -m critical)
    high: High priority tests
    standard: Standard priority tests
    nice_to_have: Nice-to-have tests
    
    # Test type markers
    unit: Fast, isolated unit tests (deselect with: -m "not unit")
    integration: Integration tests requiring external resources
    e2e: End-to-end workflow tests
    performance: Performance benchmark tests
    
    # Speed markers
    slow: Tests that take > 1s to run (deselect with: -m "not slow")
    
    # Special markers
    asyncio: Asynchronous test (automatically applied by pytest-asyncio)
    timeout(seconds): Test timeout duration (e.g., @pytest.mark.timeout(10))
    flaky(reruns, delay): Retry flaky tests (e.g., @pytest.mark.flaky(reruns=3, delay=1))
    
    # Feature markers
    websocket: Tests involving WebSocket functionality
    sse: Tests involving Server-Sent Events
    mcp: Tests for MCP (Model Context Protocol) functionality
    rag: Tests for RAG (Retrieval Augmented Generation) functionality
    
    # Environment markers
    requires_openai: Tests requiring OpenAI API access
    requires_supabase: Tests requiring Supabase access
    requires_network: Tests requiring network access

# Async configuration
asyncio_mode = auto

# Timeout configuration
timeout = 300
timeout_method = thread

# Coverage configuration
[coverage:run]
branch = True
parallel = True
source_pkgs = src
omit = 
    */tests/*
    */migrations/*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = True
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
env_files =
    .env.test